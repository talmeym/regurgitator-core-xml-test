package com.emarte.regurgitator.test;import com.emarte.regurgitator.core.*;import org.dom4j.Element;import org.junit.Test;import java.util.HashSet;import static junit.framework.Assert.assertEquals;public class CreateParameterXmlLoaderTest extends XmlBaseTest {	private CreateParameterXmlLoader toTest = new CreateParameterXmlLoader();	@Test	public void testValue() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_value.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[null,'value'],null]");	}	@Test	public void testFile() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_file.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[null,'file-value'],null]");	}	@Test	public void testSource() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_source.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[com.emarte.regurgitator.core.ContextLocation:['context:location'],null],null]");	}	@Test	public void testSourceAndValue() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_sourceAndValue.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[com.emarte.regurgitator.core.ContextLocation:['context:location'],'value'],null]");	}	@Test	public void testSourceAndFile() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_sourceAndFile.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[com.emarte.regurgitator.core.ContextLocation:['context:location'],'file-value'],null]");	}	@Test	public void testProcessor() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_processor.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[com.emarte.regurgitator.core.ContextLocation:['context:location'],null],com.emarte.regurgitator.test.stuff.TestValueProcessor:[]]");	}	@Test	public void testProcessorConfig() throws Exception {		assertExpectation(getElement("classpath:/CreateParameter_processorConfig.xml"), "com.emarte.regurgitator.core.CreateParameter:['create-param-1',com.emarte.regurgitator.core.ParameterPrototype:['toTest1',com.emarte.regurgitator.core.StringType:[],com.emarte.regurgitator.core.ConflictPolicy:REPLACE],'parameters',com.emarte.regurgitator.core.ValueSource:[com.emarte.regurgitator.core.ContextLocation:['context:location'],null],com.emarte.regurgitator.test.stuff.TestValueProcessor:[]]");	}	@Test	public void testFullLoad() throws Exception {		ConfigurationFile.loadFile("classpath:/CreateParameter_processor.xml");	}	@Test(expected = RegurgitatorException.class)	public void testValueAndFileException() throws Exception {		toTest.load(getElement("classpath:/CreateParameter_valueAndFile.xml"), new HashSet<Object>());	}	@Test(expected = RegurgitatorException.class)	public void testNothingException() throws Exception {		toTest.load(getElement("classpath:/CreateParameter_nothing.xml"), new HashSet<Object>());	}	@Test(expected = RegurgitatorException.class)	public void testMissingFileException() throws Exception {		toTest.load(getElement("classpath:/CreateParameter_missingFile.xml"), new HashSet<Object>());	}	private void assertExpectation(Element element, String expected) throws RegurgitatorException {		assertEquals(expected, toTest.load(element, new HashSet<Object>()).toString());	}}